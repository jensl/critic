/* -*- mode: js; indent-tabs-mode: nil -*-

 Copyright 2013 Jens Lindstr√∂m, Opera Software ASA

 Licensed under the Apache License, Version 2.0 (the "License"); you may not
 use this file except in compliance with the License.  You may obtain a copy of
 the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 License for the specific language governing permissions and limitations under
 the License.

*/

"use strict";

var standard_stylesheets = { "third-party/jquery-ui.css": 1, "overrides.css": 1, "basic.css": 1 };
var standard_scripts = { "third-party/jquery.js": 1, "third-party/jquery-ui.js": 1, "basic.js": 1 };
var standard_links = { home: "Home",
                       dashboard: "Dashboard",
                       branches: "Branches",
                       services: "Services",
                       repositories: "Repositories",
                       search: "Search",
                       manageextensions: "Extensions",
                       config: "Config",
                       tutorial: "Tutorial" };
var entities = { "<": "&lt;", "&": "&amp;", ">": "&gt;", "'": "&apos;", '"': "&quot;" };

function htmlify(text)
{
  return String(text).replace(/[<&>'"]/g, function (ch) { return entities[ch]; });
}

function writeStandardHeader(title, data)
{
  if (title instanceof CriticUser)
    throw CriticError("API change: the user argument was moved to the HeaderData dictionary (and is now optional)");

  write("<!DOCTYPE html><html><head><title>%s</title>", htmlify(title));

  data = data || {};

  var user = data.user || global.user;

  for (var stylesheet in standard_stylesheets)
    write("<link rel=stylesheet type=text/css href=/static-resource/%s>", stylesheet);
  if (data.stylesheets)
    for (var index = 0; index < data.stylesheets.length; ++index)
      write("<link rel=stylesheet type=text/css href='%s'>", htmlify(data.stylesheets[index]));

  if (data.links)
    for (var link in data.links)
    {
      var match = /^rel=(.*)$/.exec(link);
      if (match)
        write("<link rel='%s' href='%s'>", match[1], data.links[link]);
    }

  write("<link rel=icon href=/static-resource/favicon%s.png>", is_development ? "-dev" : "");
  write("<style type=text/css>body { %s }</style>", user.getPreference("style.defaultFont"));

  for (var script in standard_scripts)
    write("<script type=text/javascript src=/static-resource/%s></script>", script);
  if (data.scripts)
    for (var index = 0; index < data.scripts.length; ++index)
      write("<script type=text/javascript src='%s'></script>", htmlify(data.scripts[index]));

  if (typeof data.review == "object")
    write("<script type=text/javascript>var critic = critic || {}; critic.review = { id: %d }; critic.repository = { id: %d };</script>", data.review.id, data.review.repository.id);

  var opera_class = "opera";

  if (is_development)
    opera_class += " development";

  write("</head><body><table class=pageheader width=100%%><tr><td class=left valign=bottom align=left><b onclick='location.href=\"/\"'><b class='%s'>Opera</b><b class=critic>Critic</b></b><ul>", opera_class);

  var first = true;

  for (var link in standard_links)
  {
    if (link == "services" && !user.hasRole("administrator"))
      continue;
    if (link == "repositories" && !user.hasRole("repositories"))
      continue;
    write("<li><a href=/%s>%s</a></li>", link, standard_links[link]);
  }

  var result = db.execute("SELECT COUNT(*) AS unread FROM newsitems LEFT OUTER JOIN newsread ON (item=id AND uid=%d) WHERE uid IS NULL", user.id)[0];

  if (result.unread)
    write("<li><a href=/news style=color:red>News (%d)</a></li>", result.unread);
  else
    write("<li><a href=/news>News</a></li>");

  if (data.links)
    for (var link in data.links)
      if (!/^rel=/.test(link))
        write("<li><a href=%s>%s</a></li>", data.links[link], link);

  if (data.review)
  {
    var review_id;
    if (typeof data.review == "number")
      review_id = data.review;
    else
      review_id = data.review.id;
    write("<li><a href=/r/%d>Back to review</a></li>", review_id);
  }

  write("</ul></td><td class=right><span class=buttonscope-global></span></td></tr></table>");
}

function writeStandardFooter(data)
{
  var result = db.execute("SELECT extensions.name, users.fullname " +
                          "FROM extensions " +
                          "JOIN users ON (users.id=extensions.author) " +
                          "WHERE extensions.id=%d", extension_id)[0];

  write("<div class=pagefooter>");
  write("Generated by extension: %s by %s", result[0], result[1]);
  write("</div></body></html>");
}

function PaleYellowTable(title)
{
  this.title = title;
  this.rows = [];
}

PaleYellowTable.prototype.addHeading = function (title)
  {
    this.rows.push(format("<tr><td class=h2 colspan=3><h2>%s</h2></td></tr>", htmlify(title)));
  };

PaleYellowTable.prototype.addItem = function (data)
  {
    if (data.html)
      this.rows.push(format("<tr class=html><td colspan=3>%s</td></tr>", data.html));
    else if (data.name)
    {
      var buttons_html;

      if (data.buttons)
      {
        buttons_html = "<div class=buttons>";
        for (var button_name in data.buttons)
          buttons_html += format("<button onclick='%s'>%s</button>", htmlify(data.buttons[button_name]), htmlify(button_name));
        buttons_html += "</div>";
      }
      else
        buttons_html = "";

      this.rows.push(format("<tr class=item><td class=name>%s:</td><td class=value colspan=2>%s%s</td></tr>", htmlify(data.name), data.value, buttons_html));
      this.rows.push(format("<tr class=help><td colspan=3>%s</td></tr>", htmlify(data.description)));
    }
    else if (data.buttons)
    {
      var buttons_html = "<div class=buttons>";
      for (var button_name in data.buttons)
        buttons_html += format("<button onclick='%s'>%s</button>", htmlify(data.buttons[button_name]), htmlify(button_name));
      buttons_html += "</div>";

      this.rows.push(format("<tr class=centered><td colspan=3>%s</td></tr>", buttons_html));
    }
    else if (data.separator)
      this.rows.push("<tr class=separator><td colspan=3><div></div></td></tr>");
    else
      throw CriticError("invalid argument");
  };

PaleYellowTable.prototype.write = function ()
  {
    write("<div class=main><table class=paleyellow align=center><colgroup><col width=10%><col width=60%><col width=30%></colgroup><tbody>");
    write("<tr><td class=h1 colspan=3><h1>%s</h1></td></tr>", htmlify(this.title));

    for (var index = 0; index < this.rows.length; ++index)
      write(this.rows[index]);

    write("</tbody></table></div>");
  };

var CriticHtml = { writeStandardHeader: writeStandardHeader,
                   writeStandardFooter: writeStandardFooter,
                   PaleYellowTable: PaleYellowTable,
                   escape: htmlify };

Object.freeze(CriticHtml);
