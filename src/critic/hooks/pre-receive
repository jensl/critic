#!/usr/bin/env python
# -*- mode: python; encoding: utf-8 -*-
#
# Copyright 2012 Jens Lindstr√∂m, Opera Software ASA
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

from sys import stdin, stdout, path, exit
from os import getcwd, getuid, environ
from pwd import getpwuid
from socket import socket, AF_UNIX, SOCK_STREAM, SHUT_WR
from subprocess import Popen, PIPE

def gitconfig(name):
    process = Popen(["git", "config", name], stdout=PIPE)
    stdout, stderr = process.communicate()
    if process.returncode == 0: return stdout.strip()
    else: return None

socket_path = gitconfig("critic.socket")
repository_name = gitconfig("critic.name")

if not socket_path or not repository_name:
    print """Repository is not configured properly!  Please add

[critic]
\tsocket = <socket path>
\tname = <repository name>

to the repository's configuration file."""
    exit(1)

server_socket = socket(AF_UNIX, SOCK_STREAM)

try:
    server_socket.connect(socket_path)
except:
    print "Failed to connect to Critic's githook service!"
    exit(1)

# Line 1: user name.
data = getpwuid(getuid()).pw_name + "\n"

# Line 2: $REMOTE_USER or empty string if undefined.  This will only be used
#         if the actual user (line 1) is the Critic system user.
data += environ.get("REMOTE_USER", "") + "\n"

# Line 3: repository name.
data += repository_name + "\n"

# Line 4: flags from $CRITIC_FLAGS or empty string if undefined.
data += environ.get("CRITIC_FLAGS", "") + "\n"

# Line 5-N: input to the git hook.
data += stdin.read()

try:
    server_socket.sendall(data)
    server_socket.shutdown(SHUT_WR)
except:
    print "Failed to send command to Critic!"
    exit(1)

data = ""

try:
    while True:
        received = server_socket.recv(4096)
        if not received: break
        data += received

        while "\n" in data and data != "ok\n":
            line_length = data.index("\n") + 1
            line = data[:line_length]
            data = data[line_length:]
            stdout.write(line)

        stdout.flush()

    server_socket.close()
except:
    print "Failed to read result from Critic!"
    exit(1)

if data == "ok\n": exit(0)
else: exit(1)
