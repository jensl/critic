#!%(installation.prereqs.python)s
# -*- mode: python -*-

import sys
import argparse
import os
import pwd
import grp

system_user_uid = pwd.getpwnam("%(installation.system.username)s").pw_uid
system_user_gid = grp.getgrnam("%(installation.system.groupname)s").gr_gid

try:
    os.setgid(system_user_gid)
    os.setuid(system_user_uid)
except OSError:
    print "ERROR: Failed to set UID = %(installation.system.username)s. Run as root?"
    sys.exit(1)

argv = sys.argv[1:]
command = None
command_argv = []

for index, argument in enumerate(argv):
    if not argument[0] == "-":
        command = argument
        command_argv = argv[index + 1:]
        argv = argv[1:index]
        break

parser = argparse.ArgumentParser(
    description="Critic administration interface",
    usage="%%(prog)s [-h] [--etc-dir ETC_DIR] [--identify IDENTITY] COMMAND [options]",
    add_help=False)

parser.add_argument("--help", "-h", action="store_true",
                    help="show this help message and exit")
parser.add_argument("--etc-dir", "-e", default="%(installation.paths.etc_dir)s",
                    help="Critic configuration directory [default=%(installation.paths.etc_dir)s")
parser.add_argument("--identity", "-i", default="main",
                    help="system identity to manage [default=main]")

arguments = parser.parse_args(argv)

etc_path = os.path.join(arguments.etc_dir, arguments.identity)

class Error(Exception):
    pass

try:
    if not os.access(arguments.etc_dir, os.R_OK | os.X_OK):
        raise Error("Directory is inaccessible: %%s" %% arguments.etc_dir)

    if not os.path.isdir(etc_path):
        raise Error("Invalid identity: %%s" %% arguments.identity)

    sys.path.insert(0, etc_path)

    try:
        import configuration
    except ImportError:
        raise Error("Failed to import: configuration")

    sys.path.insert(1, configuration.paths.INSTALL_DIR)
    sys.path.insert(2, configuration.paths.DATA_DIR)

    try:
        import maintenance.criticctl
    except ImportError:
        raise Error("Failed to import: maintenance.criticctl")

    sys.exit(maintenance.criticctl.main(parser, arguments.help,
                                        command, command_argv))
except Error as error:
    if arguments.help:
        parser.print_help()
        print

    print >>sys.stderr, "ERROR: %%s" %% error.message
    sys.exit(1)
